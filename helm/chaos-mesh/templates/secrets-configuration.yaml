{{- $webhookName := printf "%s.%s.svc" (include "chaos-mesh.svc" .) .Release.Namespace }}
{{- $ca := genCA "chaos-mesh-ca" 1825 }}
{{- $webhookServerCert := genSignedCert $webhookName nil (list $webhookName) 1825 $ca }}
{{- $certManagerEnabled := .Values.webhook.certManager.enabled }}
{{- $timeoutSeconds := .Values.webhook.timeoutSeconds }}
{{- $crtPEM := .Values.webhook.crtPEM }}
{{- $keyPEM := .Values.webhook.keyPEM }}

{{- $supportTimeoutSeconds := false }}
{{- if ge .Capabilities.KubeVersion.Minor "14" }}
{{- $supportTimeoutSeconds = true }}
{{- end }}

{{- if not $certManagerEnabled }}
kind: Secret
apiVersion: v1
metadata:
  name: {{ template "chaos-mesh.webhook.certs" . }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "chaos-mesh.labels" . | nindent 4 }}
    app.kubernetes.io/component: webhook-secret
type: Opaque
data:
  ca.crt: {{ b64enc $ca.Cert }}
  tls.crt: {{ ternary (b64enc $webhookServerCert.Cert) (b64enc (trim $crtPEM)) (empty $crtPEM) }}
  tls.key: {{ ternary (b64enc $webhookServerCert.Key) (b64enc (trim $keyPEM)) (empty $keyPEM) }}

{{- if .Values.dashboard.securityMode }}
---
{{- $chaosDaemonCert := genSignedCert "chaos-daemon.chaos-mesh.org" nil (list "localhost" "chaos-daemon.chaos-mesh.org") 1825 $ca }}
kind: Secret
apiVersion: v1
metadata:
  name: {{ template "chaos-mesh.daemon.certs" . }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "chaos-mesh.labels" . | nindent 4 }}
    app.kubernetes.io/component: chaos-daemon-cert
type: Opaque
data:
  ca.crt: {{ b64enc $ca.Cert }}
  tls.crt: {{ b64enc $chaosDaemonCert.Cert }}
  tls.key: {{ b64enc $chaosDaemonCert.Key }}
---
{{- $chaosDaemonClientCert := genSignedCert "controller-manager.chaos-mesh.org" nil (list "localhost" "controller-manager.chaos-mesh.org") 1825 $ca }}
kind: Secret
apiVersion: v1
metadata:
  name: {{ template "chaos-mesh.daemon-client.certs" . }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "chaos-mesh.labels" . | nindent 4 }}
    app.kubernetes.io/component: chaos-daemon-client-cert
type: Opaque
data:
  ca.crt: {{ b64enc $ca.Cert }}
  tls.crt: {{ b64enc $chaosDaemonClientCert.Cert }}
  tls.key: {{ b64enc $chaosDaemonClientCert.Key }}
{{- end }}

{{- end }}
---
apiVersion: admissionregistration.k8s.io/v1beta1
kind: MutatingWebhookConfiguration
metadata:
  name: {{ template "chaos-mesh.mutation" . }}
  labels:
    {{- include "chaos-mesh.labels" . | nindent 4 }}
    app.kubernetes.io/component: admission-webhook
  {{- if $certManagerEnabled }}
  annotations:
    cert-manager.io/inject-ca-from: {{ printf "%s/%s" .Release.Namespace "chaos-mesh-cert" | quote }}
  {{- end }}
webhooks:
  - name: {{ template "chaos-mesh.webhook" . }}
    {{- if $supportTimeoutSeconds }}
    timeoutSeconds: {{ $timeoutSeconds }}
    {{- end}}
    clientConfig:
      {{- if $certManagerEnabled }}
      caBundle: Cg==
      {{- else }}
      caBundle: {{ ternary (b64enc $ca.Cert) (b64enc (trim $crtPEM)) (empty $crtPEM) }}
      {{- end }}
      service:
        name: {{ template "chaos-mesh.svc" . }}
        namespace: {{ .Release.Namespace | quote }}
        path: "/inject-v1-pod"
    rules:
      - operations: [ "CREATE" ]
        apiGroups: [""]
        apiVersions: ["v1"]
        resources: ["pods"]
    namespaceSelector:
      matchLabels:
        admission-webhook: enabled
    failurePolicy: {{ .Values.webhook.FailurePolicy }}
  {{- range $crd := .Values.webhook.CRDS }}
  - clientConfig:
      {{- if $certManagerEnabled }}
      caBundle: Cg==
      {{- else }}
      caBundle: {{ ternary (b64enc $ca.Cert) (b64enc (trim $crtPEM)) (empty $crtPEM) }}
      {{- end }}
      service:
        name: {{ template "chaos-mesh.svc" $ }}
        namespace: {{ $.Release.Namespace | quote }}
        path: /mutate-chaos-mesh-org-v1alpha1-{{ $crd }}
    failurePolicy: Fail
    name: m{{ $crd }}.kb.io
    {{- if $supportTimeoutSeconds }}
    timeoutSeconds: {{ $timeoutSeconds }}
    {{- end}}
    rules:
      - apiGroups:
          - chaos-mesh.org
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
        resources:
          - {{ $crd }}
  {{- end }}
---

apiVersion: admissionregistration.k8s.io/v1beta1
kind: ValidatingWebhookConfiguration
metadata:
  name: {{ template "chaos-mesh.validation" . }}
  labels:
    {{- include "chaos-mesh.labels" . | nindent 4 }}
    app.kubernetes.io/component: admission-webhook
  {{- if $certManagerEnabled }}
  annotations:
    cert-manager.io/inject-ca-from: {{ printf "%s/%s" .Release.Namespace "chaos-mesh-cert" | quote }}
  {{- end }}
webhooks:
  {{- range $crd := .Values.webhook.CRDS }}
  {{- if not (or (eq $crd "podiochaos") (eq $crd "podhttpchaos")) }}
  - clientConfig:
      {{- if $certManagerEnabled }}
      caBundle: Cg==
      {{- else }}
      caBundle: {{ ternary (b64enc $ca.Cert) (b64enc (trim $crtPEM)) (empty $crtPEM) }}
      {{- end }}
      service:
        name: {{ template "chaos-mesh.svc" $ }}
        namespace: {{ $.Release.Namespace | quote }}
        path: /validate-chaos-mesh-org-v1alpha1-{{ $crd }}
    failurePolicy: Fail
    name: v{{ $crd }}.kb.io
    {{- if $supportTimeoutSeconds }}
    timeoutSeconds: {{ $timeoutSeconds }}
    {{- end}}
    rules:
      - apiGroups:
          - chaos-mesh.org
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
        resources:
          {{- if eq $crd "schedule" }}
          - schedules
          {{- else if eq $crd "workflow" }}
          - workflows
          {{- else }}
          - {{ $crd }}
          {{- end }}
  {{- end }}
  {{- end }}

---

apiVersion: admissionregistration.k8s.io/v1beta1
kind: ValidatingWebhookConfiguration
metadata:
  name: validate-auth
  labels:
    {{- include "chaos-mesh.labels" . | nindent 4 }}
    app.kubernetes.io/component: admission-webhook
  {{- if $certManagerEnabled }}
  annotations:
    cert-manager.io/inject-ca-from: {{ printf "%s/%s" .Release.Namespace "chaos-mesh-cert" | quote }}
  {{- end }}
webhooks:
  - clientConfig:
      {{- if $certManagerEnabled }}
      caBundle: Cg==
      {{- else }}
      caBundle: {{ ternary (b64enc $ca.Cert) (b64enc (trim $crtPEM)) (empty $crtPEM) }}
      {{- end }}
      service:
        name: {{ template "chaos-mesh.svc" $ }}
        namespace: {{ $.Release.Namespace | quote }}
        path: /validate-auth
    failurePolicy: Fail
    name: vauth.kb.io
    rules:
      - apiGroups:
          - chaos-mesh.org
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
        resources: [ "*" ]

{{- if $certManagerEnabled }}
---
apiVersion: cert-manager.io/v1alpha2
kind: Issuer
metadata:
  name: chaos-mesh-selfsigned
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "chaos-mesh.labels" . | nindent 4 }}
    app.kubernetes.io/component: chaos-mesh-selfsigned
spec:
  selfSigned: {}
---
apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: chaos-mesh-ca
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "chaos-mesh.labels" . | nindent 4 }}
    app.kubernetes.io/component: chaos-mesh-ca
spec:
  secretName: chaos-mesh-ca
  commonName: "chaos-mesh-ca"
  isCA: true
  issuerRef:
    name: chaos-mesh-selfsigned
---
apiVersion: cert-manager.io/v1alpha2
kind: Issuer
metadata:
  name: chaos-mesh-ca
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "chaos-mesh.labels" . | nindent 4 }}
    app.kubernetes.io/component: chaos-mesh-ca
spec:
  ca:
    secretName: chaos-mesh-ca
---
apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: chaos-mesh-cert
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "chaos-mesh.labels" . | nindent 4 }}
    app.kubernetes.io/component: chaos-mesh-cert
spec:
  duration: 43800h #5year
  dnsNames:
    - {{ template "chaos-mesh.svc" . }}
    - {{ template "chaos-mesh.svc" . }}.{{ .Release.Namespace }}
    - {{ template "chaos-mesh.svc" . }}.{{ .Release.Namespace }}.svc
  isCA: false
  secretName: {{ template "chaos-mesh.webhook.certs" . }}
  issuerRef:
    name: chaos-mesh-ca
---
apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: chaos-daemon-client-cert
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "chaos-mesh.labels" . | nindent 4 }}
    app.kubernetes.io/component: chaos-daemon-client-cert
spec:
  duration: 43800h #5year
  dnsNames:
    - controller-manager.chaos-mesh.org
  isCA: false
  secretName: {{ template "chaos-mesh.daemon-client.certs" . }}
  issuerRef:
    name: chaos-mesh-ca
---
apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: chaos-daemon-cert
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "chaos-mesh.labels" . | nindent 4 }}
    app.kubernetes.io/component: chaos-daemontcert
spec:
  duration: 43800h #5year
  dnsNames:
    - chaos-daemon.chaos-mesh.org
  isCA: false
  secretName: {{ template "chaos-mesh.daemon.certs" . }}
  issuerRef:
    name: chaos-mesh-ca
{{- end }}
